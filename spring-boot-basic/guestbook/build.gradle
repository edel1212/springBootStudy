plugins {
	id 'org.springframework.boot' version '2.7.4'
	id 'io.spring.dependency-management' version '1.0.14.RELEASE'
	id 'java'
	id 'war'
	// 1. querydsl plugins 추가
	id "com.ewerk.gradle.plugins.querydsl" version "1.0.10"
}

group = 'com.yoo'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	annotationProcessor 'org.projectlombok:lombok'
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'
	providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'

	// test 환경 lombok 사용 가능하끔 설정
	testCompileOnly 'org.projectlombok:lombok'
	testAnnotationProcessor 'org.projectlombok:lombok'

	// https://mvnrepository.com/artifact/org.thymeleaf.extras/thymeleaf-extras-java8time
	implementation group: 'org.thymeleaf.extras', name: 'thymeleaf-extras-java8time'

	//2. Querydsl 라이브러리 추가
	implementation "com.querydsl:querydsl-jpa:5.0.0"
	implementation "com.querydsl:querydsl-apt:5.0.0"

}

tasks.named('test') {
	useJUnitPlatform()
}


/**
 * @Description : 설정 추가 -> gradle 빌드 -> compileQuerydsl{.. } 을 실행 하면
 *                 build > generated > querydsl > My_packageDir > entity
 * 	              Q + Entity Class 들이 생긴 것을 확인 할수있다.
 * 	              해당 Q도메인들은 개발자가 직접 건드리지 않는다
 *                 gradle 의 CompileQuerydsl 과 같은 task 를 통해서 자동으로 생성된다.
 *
 * 	              ✅ Querydsl을 사용 하기 위해선 사용하려는 jpaRepository에
 *                    QuerydslPredicateExecutor를 상속해줘야한다.
 *                    ㄴ> @See GuestbookRepository.java
 *
 * */


// 3. Querydsl 설정 추가
 
// Querydsl에서 사용할 경로 설정
def querydslDir = "$buildDir/generated/querydsl"
// JPA 사용 여부와 사용할 경로를 설정
querydsl {
	jpa = true
	querydslSourcesDir = querydslDir
}
// build 시 사용할 sourceSet 추가
sourceSets {
	main.java.srcDir querydslDir
}
// Querydsl 컴파일시 사용할 옵션 설정
compileQuerydsl{
	options.annotationProcessorPath = configurations.querydsl
}
// Querydsl 이 compileClassPath 를 상속하도록 설정
configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
	querydsl.extendsFrom compileClasspath
}
